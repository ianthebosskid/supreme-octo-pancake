//This code defines the first class
var class1 = function(attack,defense,speed) {
this.attack = 60 + 5 * attack;
this.defense = 10 + 5 * defense;
this.speed = 30 + 5 * speed;
this.health = 200 + healthBonus;
};
class1.prototype.ability = function() {
this.attack += 10;
return this.attack;
};
class1.prototype.abilityCooldown = function() {
this.attack -= 10;
return this.attack;
};
//This code defines the second class
var class2 = function(attack,defense,speed) {
this.attack = 30 + 5 * attack;
this.defense = 50 + 5 * defense;
this.speed = 10 + 5 * speed;
this.health = 200 + healthBonus;
};
class2.prototype.ability = function() {
this.defense += 10;
return this.defense;
};
class2.prototype.abilityCooldown = function() {
this.defense -= 10;
return this.defense;
};
//This defines the third class
var class3 = function(attack,defense,speed) {
this.attack = 10 + 5 * attack;
this.defense = 30 + 5 * defense;
this.speed = 60 + 5 * speed;
this.health = 200 + healthBonus;
};
class3.prototype.ability = function() {
this.attack += 5;
this.defense += 5;
return this.defense, this.attack;
};
class3.prototype.abilityCooldown = function() {
this.defense -= 5;
this.attack -= 5;
return this.defense, this.attack;
};
var class4 = function(attack,defense,speed) {
this.attack = 30 + 5 * attack;
this.defense = 50 + 5 * defense;
this.speed = 10 + 5 * speed;
this.health = 250 + healthBonus;
};
//This defines the munchkin
var munchkin = function() {
this.attack = 40;
this.defense = 20;
this.speed = 60;
this.health = 100;
this.type = "munchkin";
};
//This defines the ogre
var ogre = function() {
this.attack = 90;
this.defense = 50;
this.speed = 20;
this.health = 200;
this.type = "ogre";
};
//This defines the mercenary
var mercenary = function() {
//Defines the attack of the mercenary
this.attack = 50;
//Defines the defense of the mercenary
this.defense = 40;
this.speed = 80;
this.health = 150;
this.type = "mercenary";
};
//This defines the giant spider
var giantSpider = function() {
//This defines the giant spider’s attack
this.attack = 80;
//This defines the giant spider’’s defense
this.defense = 40;
//This defines the giant spider’s speed
this.speed = 40;
//This defines the giant spider’s health
this.health = 80;
//This tells you what type the giant spider is
this.type = "giant spider";
};
//This defines the orc
var orc = function() {
//This defines the orc’s attack
this.attack = 30;
//This defines the orc’s defense
this.defense = 20;
//This defines the orc’s speed
this.speed = 40;
//This defines the orc’s health
this.health = 120;
//This tells you what type of the orc is
this.type = "orc";
};
//This defines the goblin 
var goblin = function() {
//This defines the goblin’s attack
this.attack = 15;
//This defines the goblin’s defense
this.defense = 10;
//This defines the goblin’s speed
this.speed = 50;
//This defines the goblin’s health
this.health = 20;
//This tells you what type the goblin is
this.type = "goblin";
};

//This defines the knight
var knight = function() {
//This defines the knight’s attack
this.attack = 40;
//This defines the knight’s defense
this.defense = 40;
//This defines the knight’s speed
this.speed = 40;
//This defines the knight’s health
this.health = 80;
//This tells you what type the knight is
this.type = "knight";
};
var healthItem = function(name,rarity) {
this.name = name;
this.rarity = rarity;
this.type = "health";
};
var attackItem = function(name,rarity) {
this.name = name;
this.rarity = rarity;
this.type = "attack";
};
var defAttack = function(attack,defense,speed) {
oneToHundred = Math.floor(Math.random() * 100 + 1);
oneToHundred2 = Math.floor(Math.random() * 100 + 1);
if (speed > 100) {
speed = 100;
}
if (defense > 50) {
defense = 50;
}
if (oneToHundred >= 100 - speed && oneToHundred2 >= 100 - defense) {
hit = true;
} 
if (hit) {
return attack;
}
};
//This creates a popup that tells you which lets you pick a class
race = prompt("Humans get an extra attribute point, elves get a bonus to speed, dwarves receive extra health, and halflings get better item drops. Do you want to be an elf, a human, a dwarf, or a halfling? Please enter elf, human, dwarf, or halfling.");
while (race !== "human" && race !== "elf" && race !== "dwarf" && race !== "halfling") {
    race = prompt("Humans get an extra attribute point, elves get a bonus to speed, dwarves receive extra health, and halflings get better item drops. Do you want to be an elf, a human, a dwarf, or a halfling? Please enter elf, human, dwarf, or halfling.");
}
alert("Class 1 gives you a hero with attack and speed but little defense, class 2 gives you a hero with defense and attack but little speed, class 3 gives you speed and attack but little defense, and class 4 gives attack and defense but little speed plus a larger maximum health. With class 1 you get to increase attack, with class 2 defense, in class 3 both defense and attack, and class 4 does not have any abilities.");
classNumber = prompt("Do you want to be class 1, 2, 3, or 4? Please enter 1, 2, 3, or 4.");
while (classNumber !== "1" && classNumber !== "2" && classNumber !== "3" && classNumber !== "4") {
    classNumber = prompt("Do you want to be class 1, 2, 3, or 4? Please enter 1, 2, 3, or 4.");
}
//This creates a popup that tells you to devote attribute points
if (race === "human") {
alert("You have eleven attribute points, and you can use them to improve your hero's attack, defense, and speed.");
bonus = 1;
} else {
bonus = 0;
alert("You have ten attribute points, and you can use them to improve your hero's attack, defense, and speed.");
}
//This asks you how many points you want to devote to attack
stat1 = prompt("How many of your attribute points are you going to devote to attack?");
//This asks you how many points you want to devote to defense
stat2 = prompt("How many of your attribute points are you going to devote to defense?");
//This asks you how many points you want to devote to speed
stat3 = prompt("How many of your attribute points are you going to devote to speed?");
var stat1 = parseInt(stat1,0);
var stat2 = parseInt(stat2,0);
var stat3 = parseInt(stat3,0);
var total = stat1 + stat2 + stat3 - bonus;
while (total !== parseInt(10,0)) {
alert("Remember, you have ten attribute points.");
stat1 = prompt("How many of your attribute points are you going to devote to attack?");
stat2 = prompt("How many of your attribute points are you going to devote to defense?");
stat3 = prompt("How many of your attribute points are you going to devote to speed?");
var stat1 = parseInt(stat1,0);
var stat2 = parseInt(stat2,0);
var stat3 = parseInt(stat3,0);
var total = stat1 + stat2 + stat3 - bonus;
}
if (race === "elf") {
speedBonus = 2;
} else {
speedBonus = 0;
}
if (race === "dwarf") {
healthBonus = 25;
} else {
healthBonus = 0;
}
if (race === "halfling") {
dropBonus = 20;
} else {
dropBonus = 0;
}
if (classNumber === "1") {
var hero = new class1(stat1, stat2, stat3 + speedBonus);
} else if (classNumber === "2") {
var hero = new class2(stat1, stat2, stat3 + speedBonus);
} else if (classNumber === "3") {
var hero = new class3(stat1, stat2, stat3 + speedBonus);
} else if (classNumber === "4") {
var hero = new class4(stat1, stat2, stat3 + speedBonus);
}
var returnHealth1 = function(attack1,defense1,speed1,health1,attack2,defense2,speed2,health2) {
return health1 - defAttack(attack2,defense1,speed2);
};
var returnHealth2 = function(attack1,defense1,speed1,health1,attack2,defense2,speed2,health2) {
return health2 - defAttack(attack1,defense2,speed1);
};
var heroHealth = function(hero,enemy) {
return returnHealth1(hero.attack,hero.defense,hero.speed,hero.health,enemy.attack,enemy.defense,enemy.speed,enemy.health);
};
var enemyHealth = function(hero,enemy) {
return returnHealth2(hero.attack,hero.defense,hero.speed,hero.health,enemy.attack,enemy.defense,enemy.speed,enemy.health);
};
//Tells you that you are on level one
alert("LEVEL 1:");
//Tells you where you are
alert("You have been contacted that there is a castle under siege. You are en route to the castle when you are attacked by a munchkin!");
//This defines the function that runs the battle
var runBattle = function(hero,enemy) {
while(hero.health > 0 && enemy.health > 0) {
roundHero = heroHealth(hero,enemy);
roundEnemy = enemyHealth(hero,enemy);
alert("Your hero has " + roundHero.toString() + " health remaining.");
alert("The " + enemy.type + " has " + roundEnemy.toString() + " health remaining.");
hero.health = roundHero;
enemy.health = roundEnemy;
}
//If an enemy has no health then it will kill the enemy
if (enemy.health <= 0) {
//Tells you that the enemy is dead
alert("The " + enemy.type + " is dead.");
//This tells you how much health you have left
alert("Your hero has " + hero.health + " health remaining.");
//If you are dead instead then this will kill you
} else if (hero.health <= 0) {
//This will tell you you are dead
alert("The hero is dead. Restart?");
//This will kill both of you if both of you are dead
} else if (hero.health <= 0 && enemy.health <= 0) {
//This kills you both
alert("The " + enemy.type + " is dead and so are you. Restart?");
}
};
//This defines the munchkin that appears in the battle
var munchkin1 = new munchkin();
//This runs the battle and tells you who is in it
runBattle(hero,munchkin1);

//This determines how much a health-giving magic item does
var rarityApplicationHealth = function(rarity) {

if (rarity === "Common") { 
return 50;
} else if (rarity === "Uncommon") {
return 75;
} else if (rarity === "Rare") { 
return 100;	
} else if (rarity === "Epic") {
return 125;
} else if (rarity === "Legendary") {
return 150;
} else if (rarity === "Mythical") {
return 200;
} 
};
var addHealthItem = function(item,hero) {
improvement = rarityApplicationHealth(item.rarity);
health = hero.health;
num = hero.health + improvement;
return num;
};
var checkHealthItem = function(item,hero) {
newHealth = addHealthItem(item,hero);
return newHealth;
};
var useHealthItem = function(item,hero,rarity) {
newHealth = checkHealthItem(item,hero);
item = item.name;
hero.health = newHealth;
alert("You have used " + rarity + " " + item + " and your hero now has " + newHealth.toString() + " health." );
};
var rarityApplicationAttack = function(rarity) {

if (rarity === "Common") { 
return 1.05;
} else if (rarity === "Uncommon") {
return 1.1;
} else if (rarity === "Rare") { 
return 1.15;	
} else if (rarity === "Epic") {
return 1.25;
} else if (rarity === "Legendary") {
return 1.35;
} else if (rarity === "Mythical") {
return 1.5;
}
};
var addAttackItem = function(item,hero) {
improvement = rarityApplicationAttack(item.rarity);
num = Math.floor(hero.attack * improvement);
return num;
};
var useAttackItem = function(item,hero,rarity) {
newAttack = addAttackItem(item,hero);
items = item.name;
hero.attack = newAttack;
alert("You have equipped " + rarity + " " + items  + " and your hero now has " + newAttack.toString() + " attack." );
};
var randomLootDrop = function(enemy) {
type = enemy.type;
oneToHundred = Math.floor(Math.random() * 100 + 1);
oneToHundred2 = Math.floor(Math.random() * 100 + 1);
oneToHundred3 = Math.floor(Math.random() * 100 + 1);
if (type === "munchkin") {
if (oneToHundred + dropBonus >= 90) {
var item = new attackItem("Mace","Uncommon");
alert("You have gained " + item.rarity + " " + item.name + ".");
return item;
} else if (oneToHundred + dropBonus >= 70) {
var item2 = new healthItem("Health Potion","Common");
alert("You have gained " + item2.rarity + " " + item2.name + ".");
return item2;
} else {
var item3 = new attackItem("Sword","Common");
alert("You have gained " + item3.rarity + " " + item3.name + ".");
return item3;
}
} else if (type === "knight") {
if (oneToHundred2 + dropBonus >= 90) {
var item4 = new attackItem("Iron Spear","Rare");
alert("You have gained " + item4.rarity + " " + item4.name + ".");
return item4;
} else if (oneToHundred2 + dropBonus >= 70) {
var item5 = new healthItem("Healing Herbs","Uncommon");
alert("You have gained " + item5.rarity + " " + item5.name + ".");
return item5;
} else {
var item6 = new attackItem("Claymore","Uncommon");
alert("You have gained " + item6.rarity + " " + item6.name + ".");
return item6;
}
} else if (type === "orc") {
if (oneToHundred3 + dropBonus >= 90) {
var item7 = new attackItem("Long Bow","Epic");
alert("You have gained " + item7.rarity + " " + item7.name + ".");
return item7;
} else if (oneToHundred3 + dropBonus >= 70) {
var item8 = new healthItem("Fungi","Rare");
alert("There is a " + item8.rarity + "fungus among us!");
return item8;
} else {
var item9 = new attackItem("Bow","Rare");
alert("You have gained " + item9.rarity + " " + item9.name + ".");
return item9;
}
}
};
var compareItems = function(oldItem,newItem) {
oldName = oldItem.name;
oldRarity = oldItem.rarity;
newName = newItem.name;
newRarity = newItem.rarity;
getNew = confirm("You currently have " + oldRarity + " " + oldName + " and you have just gotten " + newRarity + " " + newName + ". Would you like to discard the item you currently have?");
if (getNew) {
return newItem;
} else {
return oldItem;
}
};
var baseAttack = function(hero) {
if (classNumber === "1") {
var hero1 = new class1(stat1, stat2, stat3 + speedBonus);
return hero1.attack;
} else if (classNumber === "2") {
var hero2 = new class2(stat1, stat2, stat3 + speedBonus);
return hero2.attack;
} else if (classNumber === "3") {
var hero3 = new class3(stat1, stat2, stat3 + speedBonus);
return hero3.attack;
} else if (classNumber === "4") {
var hero4 = new class4(stat1, stat2, stat3 + speedBonus);
return hero4.attack;
}
};
var isAttackAlreadyEquipped = function(hero) {
if (classNumber === "1") {
var hero2 = new class1(stat1, stat2, stat3 + speedBonus);
if (hero2.attack != hero.attack) {
return true;
}
} else if (classNumber === "2") {
var hero3 = new class2(stat1, stat2, stat3 + speedBonus);
if (hero3.attack != hero.attack) {
return true;
}
} else if (classNumber === "3") {
var hero4 = new class3(stat1, stat2, stat3 + speedBonus);
if (hero4.attack != hero.attack) {
return true;
}
} else if (classNumber === "4") {
var hero5 = new class4(stat1, stat2, stat3 + speedBonus);
if (hero5.attack != hero.attack) {
return true;
}
}
};
var dequipAttackItem = function(hero) {
attack = baseAttack(hero);
hero.attack = attack;
return hero.attack;
};
var compare = function(enemy,currentItem) {
item = randomLootDrop(enemy);
itemBefore = currentItem;
newItem = compareItems(itemBefore,item);
return newItem;
};
var level = function(levelNumber,storyline,currentItem,hero) {
if (hero.health > 0) {
item = currentItem;
equipOrUse = confirm("You have a " + item.rarity + " " + item.name + ". Would you like to equip it?");
if (equipOrUse) {
if (item.type === "health") {
useHealthItem(item,hero,item.rarity);
} else if (item.type === "attack"){
if (!isAttackAlreadyEquipped(hero)) {
useAttackItem(item,hero,item.rarity);
} else {
dequip = confirm("You already have equipped an attack item. Do you want to dequip it?");
if (dequip) {
dequipAttackItem(item); 
alert("You have dequipped your previous item.");
useAttackItem(item,hero,item.rarity);
} else {
alert("Your hero is dead. Restart?");
}
}
}
} 
}
alert("LEVEL " + levelNumber.toString() + ":");
alert(storyline);
};
if (hero.health >= 0) {
var currentItem = randomLootDrop(munchkin1);
}
level(2,"You continue on your way. Then, you are stopped by a knight. He moves forward and attacks you!",currentItem,hero);
if (currentItem.type != "health") {
currentItem = null;
delete currentItem;
}
var knight1 = new knight();
runBattle(hero,knight1);
if (hero.health >= 0) {
var currentItem = randomLootDrop(knight1);
}
level(3,"You stop by a tree to rest. You hear a rustling in the bushes behind you. You turn around. Out steps an orc! The orc attacks you!",currentItem,hero);
if (currentItem.type != "health") {
currentItem = null;
delete currentItem;
}
var orc1 = new orc();
runBattle(hero,orc1);
if (hero.health >= 0) {
var currentItem = randomLootDrop(orc1);
currentItem = compare(orc1,currentItem);
}

level(4,"After defeating the orc, you move on. Then, you see a hungry giant spider! It blocks your way and moves forward to attack.",currentItem,hero);
if (currentItem.type != "health") {
currentItem = null;
delete currentItem;
}
var giantSpider1 = new giantSpider();
runBattle(hero,giantSpider1);
if (hero.health >= 0) {
var currentItem = randomLootDrop(giantSpider1);
} else {
alert("Your hero is dead. Restart?");
}
console.log();




